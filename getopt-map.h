/* getopt-map.h - v0.2 - 2014.04.26 12:19:30 GMT-3
 * License: BSD-3 clauses,  MIT or GPL2+ (any of them for derivatives)
 * Andre C. Barros - <andre.cbarros@yahoo.com>
 *
 * Improve the useability of getopt_long by applying the
 * c pre-processor stringification, id-ification and enum
 * automatic serialization.
 *
 * The main goal is to avoid the need to remember the complex
 * mapping between short and long options or the order they
 * appear on application with a large number of them.
 *
 * One drawback of this process is the handling of long options
 * with '-' between words. I would like them to be handled like
 * '_' but it would require to change the char matching inside
 * getopt, i.e., not feseable. As a workaround use _opl_ macro
 * (see below).
 * 
 * >> Obs1: avoid using '_' on the start of your long options to
 *          avoid identifier/symbol clash (it is ugly anyway).
 *
 * >> Obs2: hidden options are possible (see below). It is a
 *          useful feature for when the code that deal with
 *          them is not ready yet.
 *
 * >> Obs3: If the option_map vector is reallocad call getopt_msg
 *          with its parameters zeroed to reset its internal
 *          static var.
 *
 * >> Obs4: Except for what is on _*_header_ and _*_footer_, the
 *          order of listing of the identifiers on different structs
 *          is irrelevant.
 *
 * To make it work you must define the following structure on your
 * module with main function (program start point):
 *
 * #include <getopt-map.h>
 *
 * enum option_id {
 *     _id_default_header_
 *                     //-->> chr and str options <- no ' nor ".
 *     _id_( str_j1 ), //    Long option strings j1 to jn id-ification.
 *     ..              //
 *     _id_( str_jn ), //
 *
 *     _id_( chr_i1 ), //    Short option chars i1 to im id-ification
 *     ..              //    (not really needed but useful on special
 *     _id_( chr_im ), //    cases).
 *
 *     _id_default_footer_
 * };
 * 
 * // Only long options here
 * //
 * struct option app_opts[] = {
 *     _opt_default_header_        //-->> str <- no ' nor ".
 *
 *     _opt_( str_j1, is_needed ), //     is_needed must be <no>,
 *     ..                          //     <required> or <optional>.
 *     _opt_( str_jn, is_needed ), //     Optionally, you can use
 *                                 //     0, 1 and 2, respectively.
 *     _opt_default_footer_
 * };
 *
 * // >> ---------------------------------------------------
 * // >> Only needed if you want to use the listed functions
 * // >> ---------------------------------------------------
 * // The order correspond to what should be listed first.
 * // Hidden arguments must have { str, chr, 0 } structure (but not
 * // be all zeroed). { 0, 0, msg } can be used as continuation line.
 * //
 * struct option_map app_opts_maps[] = {
 *     _opt_map_default_header_          //-->> str <- no ' nor "; chr <- enclosed in ''.
 *                                       //-->> msg <- enclosed in "".
 *     _opt_map_( _zero, chr_i1, msg ),  //     Short option chars i1 to im with no long
 *     ..                                //     equivalents.
 *     _opt_map_( _zero, chr_im, msg ),  //
 *     ..
 *     _opt_map_( str_k1, chr_k1, msg ), //     Short option chars and long option strings
 *     ..                                //     k1 to kl equivalence.
 *     _opt_map_( str_kl, chr_kl, msg ), //
 *
 *     _opt_map_( str_j1, 0, msg ),      //     Long option strings j1 to jn with no short
 *     ..                                //     equivalents.
 *     _opt_map_( str_jn, 0, msg ),      //
 *
 *     _opt_map_default_footer_
 * };
 *
 */

#ifndef _GETOPT_MAP_H
#define _GETOPT_MAP_H

#include <limits.h>
#include <getopt.h>
#include <stdio.h>

#ifdef __cplusplus
extern "C" {
#endif

#define _to_str_(x...)       #x
#define _stringify_(x...)    _to_str_(x)
#define _id_(x)              _om_##x
#define _id2_(x,y)           _id_(x) = y
#define _idm_(x)             _id_(x##_) = _id_(x)
#define _om_0                _om__zero

// ARG_MAX is not trustable on most systems and as so arbitrary limits will be assigned.
// There is nothing being allocated anyway, these are just limits.

enum option_map_id {
    _id2_( _zero, 0 ),
    _id2_( _lim_inf, (INT_MAX>>1) - 512),  // Does not overlap with regular chars (see getopt_long
                                           // return values) and provide a "bit" of space for 
                                           // values generated by enum enumeration.
#ifndef GETOPT_MAP_EXTENSIONS
    _id2_( _lim_sup, INT_MAX - 512 )       // This is only limit value attribution, not allocation.
#else
    _id2_( _lim_sup, INT_MAX - 512 ),
    _id_( _app_header ),
    _id_( _app_footer ),
    _id_( _app_error ),
    _id_( _app_warning ),
    _id_( _app_info ),
    _id_( _app_question ),
    _id_( _app_support ),
    
    _id_( _opt_unknown ),
    _id_( _opt_missing ),
    _id_( _opt_uninitialized ),
    _id_( _opt_unhandled ),
    _id_( _opt_iteration ),
    
    _id_( _arg_obligatory ),
    _id_( _arg_optional ),
    _id_( _arg_missing ),
    _id_( _arg_invalid ),
    
    _id_( _lim_messages )
#endif
};

#define _id_default_header_  _idm_( _zero ),              \
                             _idm_( _lim_inf ),
#define _id_default_footer_  _idm_( _lim_sup )

#ifndef no_argument
#define no_argument 0
#endif
#ifndef required_argument
#define required_argument 1
#endif
#ifndef optional_argument
#define optional_argument 2
#endif
#define _0_argument          no_argument
#define _1_argument          required_argument
#define _2_argument          optional_argument
#define _no_argument         no_argument
#define _required_argument   required_argument
#define _optional_argument   optional_argument

#define _opt_(x,is_needed)      { _stringify_(x), _##is_needed##_argument, 0, _id_(x) }
#define _oph_(x,str,is_needed)  { str, _##is_needed##_argument, 0, _id_(x) }
#define _opt_zero_              {0, 0, 0, 0}  // bound mark sentinel - obligatory
#define _opt_default_header_
#define _opt_default_footer_    _opt_zero_

/** Mapped options **
 */
struct option_map {
    int  id;
    char ch;       // Mapping id <-> ch
#if defined( GETOPT_MAP_EXTENSIONS ) && defined( GETOPT_FILE_TRANSLATIONS )
    char *sid;     // Stringified id
#endif
    char *msg;
};
#if defined( GETOPT_MAP_EXTENSIONS ) && defined( GETOPT_FILE_TRANSLATIONS )
#define _opt_map_(x,y,arg)       { _id_(x), y, _stringify_( _id_(x) ), arg }
#define _opt_map_zero_           {0, 0, 0, 0}  // bound mark sentinel - obligatory
#else
#define _opt_map_(x,y,arg)       { _id_(x), y, arg }
#define _opt_map_zero_           {0, 0, 0}
#endif
#define _opt_map_default_header_
#ifndef GETOPT_MAP_EXTENSIONS
#define _opt_map_default_footer_ _opt_map_( _lim_sup, 0, "" ),                                        \
                                 _opt_map_zero_
#else
#define _opt_map_default_footer_ _opt_map_( _lim_sup, 0, "" ),                                        \
                                 _opt_map_( _app_header, 0, "Usage: %s [options] <file> ([*] = optional, <*> = obligatory)\nWhere [options] are the following:\n"), \
                                 _opt_map_( _app_footer, 0, "See the application manual for a more detailed analyse of usage.\n"), \
                                 _opt_map_( _app_error, 0, ""),                                       \
                                 _opt_map_( _app_warning, 0, ""),                                     \
                                 _opt_map_( _app_info, 0, ""),                                        \
                                 _opt_map_( _app_question, 0, ""),                                    \
                                 _opt_map_( _app_support, 0, "Please, file a ticket for support.\n"), \
                                                                                                      \
                                 _opt_map_( _opt_unknown, 0, "Unknown option"),                       \
                                 _opt_map_( _opt_missing, 0, "Missing obligatory option"),            \
                                 _opt_map_( _opt_uninitialized, 0, "Uninitialized option"),           \
                                 _opt_map_( _opt_unhandled, 0, "Unhandled option"),                   \
                                 _opt_map_( _opt_iteration, 0, "Options iteration"),                  \
                                                                                                      \
                                 _opt_map_( _arg_obligatory, 0, "<value>"),                           \
                                 _opt_map_( _arg_optional, 0, "[value]"),                             \
                                 _opt_map_( _arg_missing, 0, "Missing argument to"),                  \
                                 _opt_map_( _arg_invalid, 0, "Invalid argument to"),                  \
                                 _opt_map_zero_
#endif

struct option *     option_p (struct option *opts, int id);
#ifdef GETOPT_MAP_EXTENSIONS
struct option_map * option_map_p (struct option_map *maps, int id);

int    getopt_map (struct option_map *maps, int id);
char * getopt_msg (struct option_map *maps, int id);
void   getopt_usage (char *app_name, char *app_version, char *app_license,
                     char *short_opts, struct option *long_opts,
                     struct option_map *opts_maps, int exit_val);
#ifdef GETOPT_FILE_TRANSLATIONS
extern struct option opt_zero;
extern struct option_map opt_map_zero;

int    getopt_map_write (FILE *f, struct option_map *msgs);
int    getopt_map_read  (FILE *f, struct option_map *msgs);
#endif
#endif /* GETOPT_MAP_EXTENSIONS */

#ifdef __cplusplus
}
#endif

#endif /* _GETOPT_MAP_H */
